---
- name: 10000 - SETUP | clone repo.
  git:
    repo: "{{ https_repo }}"
    dest: "{{ working_dir }}"

- name: 10010 - COMMIT | nothing to commit.
  register: result
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    add: [ "." ]
    comment: Nothing to commit
    url: "{{ https_repo }}"
- debug: var=result
- assert: { that: not result.changed }

- name: 10020 - ADD FAIL | add not exsisting file.
  register: result
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    comment: Add not existing file
    add: [ i_do_not_exsisit.txt ]
    url: "{{ https_repo }}"
  ignore_errors: true
- debug: var=result
- assert: { that: not result.changed }

- name: 10030 -SETUP | set first random file name.
  set_fact:
    file1: "{{ lookup('pipe','date +%s%N') }}.txt"

- name: 10040 - SETUP | touch file1.
  file:
    path: "{{ working_dir }}{{ item }}"
    state: touch
  loop:
    - "{{ file1 }}"

- name: 10050 - HTTPS | add "{{ file1 }}" .
  register: result
  environment:
    GIT_AUTHOR_NAME: me
    GIT_AUTHOR_EMAIL: me@me.me
    GIT_COMMITTER_NAME: me
    GIT_COMMITTER_EMAIL: me@me.me
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    comment: Add file1.
    add: [ "." ]
    url: "{{ https_repo }}"
- debug: var=result
- assert: { that: result.changed }

- name: 10060 - SETUP | rm file1.
  file:
    path: "{{ working_dir }}{{ item }}"
    state: absent
  loop:
    - "{{ file1 }}"

- name: 10070 - HTTPS | assert warning message.
  register: result
  environment:
    GIT_AUTHOR_NAME: me
    GIT_AUTHOR_EMAIL: me@me.me
    GIT_COMMITTER_NAME: me
    GIT_COMMITTER_EMAIL: me@me.me
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    comment: Add file1.
    add: [ "." ]
    url: "{{ https_repo }}"
    ssh_params:
      accept_hostkey: true
      key_file: '{{ github_ssh_private_key }}'
      ssh_opts: '-o UserKnownHostsFile=/tmp/known_hosts'
- debug: var=result
- assert: { that: result.warnings }

- name: 10075 - SSH | fail because ssh:// in GitHub.
  register: result
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    comment: fail because ssh in GitHub
    add: [ "." ]
    url: "ssh://git@github.com:lvrfrc87/git-acp-test.git"
  ignore_errors: true
- debug: var=result
- assert: { that: not result.changed }

- name: 10077 - SETUP | touch file1.
  file:
    path: "{{ working_dir }}{{ item }}"
    state: touch
  loop:
    - "{{ file1 }}"

- name: 10080 - SETUP | create temporary directory.
  tempfile:
    state: directory
    suffix: .test
  register: remote_tmp_dir

- name: 10090 -  SETUP | Record temporary directory.
  set_fact:
    remote_tmp_dir: "{{ remote_tmp_dir.path }}"
    cacheable: true

- name: 10100 - SETUP | check accept_hostkey support.
  shell: ssh -o StrictHostKeyChecking=accept-new -V
  register: ssh_supports_accept_hostkey
  ignore_errors: true

- name: 10110 - SETUP | missing hostkey tests.
  when: ssh_supports_accept_hostkey.rc != 0
  block:
    - name: 10120 - SSH | accept_hostkey when ssh does not support the option
      git_acp:
        url: "{{ ssh_repo }}"
        path: "{{ working_dir }}"
        branch: master
        comment: Add .
        ssh_params:
          accept_hostkey: true
          key_file: '{{ github_ssh_private_key }}'
          ssh_opts: '-o UserKnownHostsFile={{ remote_tmp_dir }}/known_hosts'
      register: git_result
      ignore_errors: true
    - assert:
        that:
          - git_result is failed
          - git_result.warnings is search("does not support")

- name: 10130 - SSH | push ssh://git@github.com repo without accept_hostkey (expected fail)
  environment:
    GIT_AUTHOR_NAME: me
    GIT_AUTHOR_EMAIL: me@me.me
    GIT_COMMITTER_NAME: me
    GIT_COMMITTER_EMAIL: me@me.me
  git_acp:
    url: "{{ ssh_repo }}"
    path: "{{ working_dir }}"
    branch: master
    comment: Add .
    ssh_params:
      ssh_opts: '-o UserKnownHostsFile={{ remote_tmp_dir }}/known_hosts'
  register: git_result
  ignore_errors: true
- assert:
    that:
      - git_result is failed

- name: 10140 - SSH | Validate ssh with private host key.
  when: github_ssh_private_key is defined and ssh_supports_accept_hostkey.rc == 0
  block:
    - name: 10150 - SSH | checkout git@github.com repo with accept_hostkey (expected pass)
      git_acp:
        path: "{{ working_dir }}"
        branch: master
        comment: Add file1.
        add: [ "{{ file1 }}" ]
        url: "{{ ssh_repo }}"
        ssh_params:
          accept_hostkey: true
          key_file: '{{ github_ssh_private_key }}'
          ssh_opts: '-o UserKnownHostsFile={{ remote_tmp_dir }}/known_hosts'
      register: git_result
    - assert:
        that:
          - git_result is changed

    - name: 10160 - SSH| checkout ssh://git@github.com repo with accept_hostkey (expected pass).
      git_acp:
        path: "{{ working_dir }}"
        branch: master
        comment: Add file1.
        add: [ "{{ file1 }}" ]
        url: "{{ ssh_repo }}"
        ssh_params:
          accept_hostkey: false # should already have been accepted
          key_file: '{{ github_ssh_private_key }}'
          ssh_opts: '-o UserKnownHostsFile={{ remote_tmp_dir }}/known_hosts'
      register: git_result
    - assert:
        that:
          - git_result is changed

    - name: 10170 - SSH | Remove github.com hostkey from known_hosts
      lineinfile:
        dest: '{{ remote_tmp_dir }}/known_hosts'
        regexp: "github.com"
        state: absent

    - name: 10180 - SETUP | debug default remote set.
      shell: git -C "{{ working_dir }}" remote get-url --all origin
      register: remote
    - debug: var=remote

- name: 10190 - SETUP | delete temporary directory
  file:
    path: "{{ remote_tmp_dir }}"
    state: absent
  no_log: true


- name: 10200 - SETUP | Create a temporary origin directory
  register: _pull_src
  tempfile:
    state: directory

- name: 10210 - SETUP | Create a temporary destination directory
  register: _pull_dest
  tempfile:
    state: directory

- name: 10220 - SETUP | Init origin directory
  shell:
    chdir: "{{ _pull_src }}"
    cmd: |
      git init
      touch a.txt
      git add -A
      git checkout -b main
      git commit -m 'commit 1'

- name: 10230 - SETUP | Clone into destination
  git:
    repo: "{{ _pull_src }}"
    dest: "{{ _pull_dest }}"

- name: 10240 - SETUP | Evolve src repo
  shell:
    chdir: "{{ _pull_src }}"
    cmd: |
      touch b.txt
      git add -A
      git commit -m 'commit 2'

- name: 10250 - SETUP | Add a file to destination repo
  file:
    path: "{{ _pull_dest }}/c.txt"
    state: file

- name: 10260 - PUSH | ACP without pull fails
  register: _acp
  ignore_errors: true
  git_acp:
    add: [ "c.txt" ]
    branch: main
    comment: commit 3
    path: "{{ _pull_dest }}"
    url: "{{ _pull_src }}"
- name: Assert last task failed
  assert:
    that: _acp is failed

- name: 10270 - PUSH | ACP with pull works
  git_acp:
    add: [ "c.txt" ]
    branch: main
    comment: commit 3
    path: "{{ _pull_dest }}"
    pull: true
    url: "{{ _pull_src }}"