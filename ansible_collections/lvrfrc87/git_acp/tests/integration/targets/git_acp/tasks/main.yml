---
- name: 10000 - SETUP | clone repo.
  git:
    repo: "https://{{ user }}:{{ token }}@gitlab.com/networkAutomation/git_test_module.git"
    dest: "{{ working_dir }}"

- name: 10005 - SETUP | https local repo ahead.
  register: result
  git_acp:
    user: "{{ user }}"
    token: "{{ token }}"
    path: "{{ working_dir }}"
    branch: master
    add: ["."]
    comment: Local repo ahead
    mode: https
    url: "https://gitlab.com/networkAutomation/git_test_module.git"
  ignore_errors: yes
- debug: var=result

- name: 10010 - SETUP | ssh local repo ahead.
  register: result
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    add: ["."]
    comment: Local repo ahead
    mode: ssh
    url: "git@gitlab.com:networkAutomation/git_test_module.git"
  ignore_errors: yes
- debug: var=result
- assert: { that: not result.changed }

- name: 10015 - SETUP | sync repo push.
  git_acp:
    user: "{{ user }}"
    token: "{{ token }}"
    path: "{{ working_dir }}"
    branch: master
    add: ["."]
    comment: Synch repos
    mode: https
    url: "https://gitlab.com/networkAutomation/git_test_module.git"
  ignore_errors: yes

- name: 10020 - COMMIT | nothing to commit.
  register: result
  git_acp:
    user: "{{ user }}"
    token: "{{ token }}"
    path: "{{ working_dir }}"
    branch: master
    add: [ "." ]
    comment: Nothing to commit
    mode: https
    url: "https://gitlab.com/networkAutomation/git_test_module.git"
- debug: var=result
- assert: { that: not result.changed }

- name: 10025 - ADD FAIL | add not exsisting file.
  register: result
  git_acp:
    user: "{{ user }}"
    token: "{{ token }}"
    path: "{{ working_dir }}"
    branch: master
    comment: Add not existing file
    add: [ i_do_not_exsisit.txt ]
    mode: https
    url: "https://gitlab.com/networkAutomation/git_test_module.git"
  ignore_errors: yes
- debug: var=result
- assert: { that: not result.changed }

- name: 10027 - SETUP | sync repo pull.
  shell: git -C {{ working_dir }} pull
  ignore_errors: yes

- name: 10030 - SETUP | set first random file name.
  set_fact:
    file1: "{{ lookup('pipe','date +%s%N') }}.txt"

- name: 10033 - SETUP | touch file1.
  file:
    path: "{{ working_dir }}{{ item }}"
    state: touch
  loop:
    - "{{ file1 }}"

- name: 10035 - HTTPS | add "{{ file1 }}" .
  register: result
  git_acp:
    user: "{{ user }}"
    token: "{{ token }}"
    path: "{{ working_dir }}"
    branch: master
    comment: Add file1.
    add: [ "." ]
    mode: https
    url: "https://gitlab.com/networkAutomation/git_test_module.git"
    user_name: "lvrfrc87"
    user_email: "lvrfrc87@gmail.com"
- debug: var=result
- assert: { that: result.changed }

- name: 10040 - SETUP | rm file1.
  file:
    path: "{{ working_dir }}{{ item }}"
    state: absent
  loop:
    - "{{ file1 }}"

- name: 10045 - SSH | add "{{ file1 }}".
  register: result
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    comment: Add file1.
    add: [ "{{ file1 }}" ]
    push_option: ci.skip
    mode: ssh
    url: "git@gitlab.com:networkAutomation/git_test_module.git"
- debug: var=result
- assert: { that: result.changed }

- name: 10050 - SETUP | touch file1.
  file:
    path: "{{ working_dir }}{{ item }}"
    state: touch
  loop:
    - "{{ file1 }}"

- name: 10055 - HTTPS | add "{{ file1 }}" to remote test_origin.
  register: result
  git_acp:
    user: "{{ user }}"
    token: "{{ token }}"
    path: "{{ working_dir }}"
    branch: master
    comment: Add file1.
    remote: test_origin
    add:
      - "."
    mode: https
    url: "https://gitlab.com/networkAutomation/git_test_module.git"
- debug: var=result
- assert: { that: result.changed }

- name: 10060 - SETUP | debug new remote set.
  shell: git -C "{{ working_dir }}" remote -v
  register: remote
- debug: var=remote
- assert: { that: "'test_origin' in remote.stdout" }

- name: 10065 - SETUP | rm file1.
  file:
    path: "{{ working_dir }}{{ item }}"
    state: absent
  loop:
    - "{{ file1 }}"

- name: 10070 - SSH | remove "{{ file1 }}" to default origin.
  register: result
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    comment: Add file1.
    add: [ "{{ file1 }}" ]
    push_option: ci.skip
    mode: ssh
    url: "git@gitlab.com:networkAutomation/git_test_module.git"
- debug: var=result
- assert: { that: result.changed }

- name: 10075 - SETUP | debug default remote set.
  shell: git -C "{{ working_dir }}" remote get-url --all origin
  register: remote
- debug: var=remote

#############################################
#
## Test using SSH using private key
##
##############################################
- name: 10160 - SSH Host Key Test Setup | create temporary directory
  tempfile:
    state: directory
    suffix: .test
  register: remote_tmp_dir
  notify:
    - delete temporary directory

- name: 10161 - SSH Host Key Test Setup | Record temporary directory
  set_fact:
    remote_tmp_dir: "{{ remote_tmp_dir.path }}"
    cacheable: "{{ setup_remote_tmp_dir_cache_path | bool }}"


- name: 10165 - MISSING-HOSTKEY | check accept_hostkey support
  shell: ssh -o StrictHostKeyChecking=accept-new -V
  register: ssh_supports_accept_hostkey
  ignore_errors: true

- name: 10166 - MISSING-HOSTKEY | missing hostkey tests
  when: ssh_supports_accept_hostkey.rc != 0
  block:

    - name: 10167 - MISSING-HOSTKEY | accept_hostkey when ssh does not support the option
      git_acp:
        url: "git@gitlab.com:networkAutomation/git_test_module.git"
        path: "{{ working_dir }}"
        branch: master
        comment: Add .
        mode: ssh
        ssh_params:
          accept_hostkey: true
          key_file: '{{ github_ssh_private_key }}'
          ssh_opts: '-o UserKnownHostsFile={{ remote_tmp_dir }}/known_hosts'
      register: git_result
      ignore_errors: true

    - assert:
        that:
          - git_result is failed
          - git_result.warnings is search("does not support")


- name: 10168 - MISSING-HOSTKEY | push ssh://git@github.com repo without accept_hostkey (expected fail)
  git_acp:
    url: "git@gitlab.com:networkAutomation/git_test_module.git"
    path: "{{ working_dir }}"
    branch: master
    comment: Add .
    mode: ssh
    ssh_params:
      ssh_opts: '-o UserKnownHostsFile={{ remote_tmp_dir }}/known_hosts'
  register: git_result
  ignore_errors: true

- assert:
    that:
      - git_result is failed

- name: 10169 - HOSTKEY TESTS | Validate ssh with private host key
  when: github_ssh_private_key is defined and ssh_supports_accept_hostkey.rc == 0
  block:
    - name: 10170 - HOSTKEY TESTS | checkout git@github.com repo with accept_hostkey (expected pass)
      git_acp:
        path: "{{ working_dir }}"
        branch: master
        comment: Add file1.
        add: [ "{{ file1 }}" ]
        mode: ssh
        url: "git@gitlab.com:networkAutomation/git_test_module.git"
        ssh_params:
          accept_hostkey: true
          key_file: '{{ github_ssh_private_key }}'
          ssh_opts: '-o UserKnownHostsFile={{ remote_tmp_dir }}/known_hosts'
      register: git_result

    - assert:
        that:
          - git_result is changed

    - name: 10172 - HOSTKEY TESTS | checkout ssh://git@github.com repo with accept_hostkey (expected pass)
      git_acp:
        path: "{{ working_dir }}"
        branch: master
        comment: Add file1.
        add: [ "{{ file1 }}" ]
        mode: ssh
        url: "git@gitlab.com:networkAutomation/git_test_module.git"
        ssh_params:
          accept_hostkey: false # should already have been accepted
          key_file: '{{ github_ssh_private_key }}'
          ssh_opts: '-o UserKnownHostsFile={{ remote_tmp_dir }}/known_hosts'
      register: git_result

    - assert:
        that:
          - git_result is changed

    - name: 10173 - HOSTKEY TESTS | Remove github.com hostkey from known_hosts
      lineinfile:
        dest: '{{ remote_tmp_dir }}/known_hosts'
        regexp: "github.com"
        state: absent

    - name: 10174 - SETUP (SSH-with-private-key) | debug default remote set.
      shell: git -C "{{ working_dir }}" remote get-url --all origin
      register: remote
    - debug: var=remote

- name: 10174 - delete temporary directory
  file:
    path: "{{ remote_tmp_dir }}"
    state: absent
  no_log: yes

- name: 10079 - HTTPS | test warning error for ssh_params in mode https.
  register: result
  git_acp:
    user: "{{ user }}"
    token: "{{ token }}"
    path: "{{ working_dir }}"
    branch: master
    comment: Warning because ssh_paramas
    add: [ "." ]
    mode: https
    ssh_params: {"test": "test"}
    url: "https://gitlab.com/networkAutomation/git_test_module.git"
  ignore_errors: yes
- debug: var=result
- assert: { that: "'SSH Parameters will be ignored' in result.warnings[0]" }


- name: 10080 - HTTPS | fail because ssh URL.
  register: result
  git_acp:
    user: "{{ user }}"
    token: "{{ token }}"
    path: "{{ working_dir }}"
    branch: master
    comment: fail because ssh URL
    add: [ "." ]
    mode: https
    url: "git@gitlab.com:networkAutomation/git_test_module.git"
  ignore_errors: yes
- debug: var=result
- assert: { that: not result.changed }

- name: 10085 - SSH | fail because https URL.
  register: result
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    comment: fail because https URL
    add: [ "." ]
    mode: ssh
    url: "https://gitlab.com/networkAutomation/git_test_module.git"
  ignore_errors: yes
- debug: var=result
- assert: { that: not result.changed }

- name: 10090 - SSH | fail because ssh:// in GitHub.
  register: result
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    comment: fail because ssh in GitHub
    add: [ "." ]
    mode: ssh
    url: "ssh://git@github.com:lvrfrc87/git-acp-test.git"
  ignore_errors: yes
- debug: var=result
- assert: { that: not result.changed }

- name: 10091 - SSH | set user.name and user.email
  register: result
  git_acp:
    path: "{{ working_dir }}"
    branch: master
    comment: add user and email only
    add: [ "." ]
    mode: ssh
    url: "git@gitlab.com:networkAutomation/git_test_module.git"
    user_name: test_user
    user_email: test_user@git.com
- debug: var=result
- assert: { that: result.changed }

- name: 10092 - SETUP | debug new user.name.
  shell: git -C {{ working_dir }} config --local user.name
  register: user
- debug: var=user
- assert: { that: "'test_user' in user.stdout" }

- name: 10093 - SETUP | debug new user.email.
  shell: git -C {{ working_dir }} config --local user.email
  register: email
- debug: var=email
- assert: { that: "'test_user@git.com' in email.stdout" }

- name: 10094 - HTTPS | fail because user_name but not user_mail.
  register: result
  git_acp:
    user: "{{ user }}"
    token: "{{ token }}"
    path: "{{ working_dir }}"
    branch: master
    comment: fail because user_name only
    add: [ "." ]
    mode: https
    user_name: test_user
    url: "git@gitlab.com:networkAutomation/git_test_module.git"
  ignore_errors: yes
- debug: var=result
- assert: { that: not result.changed }

- name: 10095 - SETUP | remove test directory.
  file:
    path: "{{ working_dir }}/test_directory"
    state: absent

- name: 10100 - SETUP | create test directory.
  file:
    path: "{{ working_dir }}/test_directory"
    state: directory

- name: 10105 - SETUP | create local bare repo
  shell: "{{ item }}"
  loop:
    - "git -C {{ working_dir }}/test_directory init --bare repo.git"
    - "git -C {{ working_dir }}/test_directory clone repo.git -l"

- name: 10110 - SETUP | touch file1.
  file:
    path: "{{ working_dir }}/test_directory/repo/{{ item }}"
    state: touch
  loop:
    - "{{ file1 }}"

- name: 10110 - LOCAL | push on local repo.
  register: result
  git_acp:
    path: "{{ working_dir }}/test_directory/repo"
    branch: master
    comment: Add file1.
    add: [ "{{ file1 }}" ]
    mode: local
    url: "{{ working_dir }}/test_directory/repo.git"
    user_name: "lvrfrc87"
    user_email: "lvrfrc87@gmail.com"
  ignore_errors: yes
- debug: var=result
- assert: { that: result.changed }

- name: 10115 - LOCAL | fail beacuse push_option
  register: result
  git_acp:
    path: "{{ working_dir }}/test_directory/repo"
    branch: master
    comment: Add file1.
    add: [ "{{ file1 }}" ]
    mode: local
    url: "{{ working_dir }}/test_directory/repo.git"
    push_option: ci.skip
  ignore_errors: yes
- debug: var=result
- assert: { that: not result.changed }

- name: 10120 - SETUP | delete test file.
  file:
    path: "{{ working_dir }}{{ item }}"
    state: absent
  ignore_errors: yes
  loop:
    - "{{ file1 }}"